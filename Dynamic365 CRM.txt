Architecture:

built on asp.net and uses SQL DB for storage.

D365 -> CRM + ERP + Business Logics tool

CRM(modules):
Sales
Services
Field Services
Marketing

ERP(modules):
Supply Chain Management
etc....

Business Logic(modules):
AI modules

****
Security:

***
Development tools/techniques -- ootb:
1. Business process flows
2. workflows
3. actions
4. Dialogs

Custom development:
form scripts/Javascripts
plugins

**********************************************
Business process flows:
 * settings -> customization -> process -> create new (type - business process flow)
what is BPF?
Guided Process to get work done
Streamlined User Experience for data entry
Visual indicator
Avoid mistake and Quick process
BPF integration with other customization
Lead to Opportunity Sales Process
Opportunity Sales Process
Phone to Case Process
Multiple entity in BPF
Switch Process
Enable in entity definition

Maximum number of processes, stages, and steps:
    There can be no more than 10 activated business process flow processes per entity. 
    Each process can contain no more than 30 stages. 
    Multi-entity processes can contain no more than five entities.
    
    
Plugins: (https://www.youtube.com/watch?v=cabRANPQBvU)
custom .net application/action inserted into CRM

* Custom Business code
* CRM Event Handlers
* Event Execution Pipeline (process thorugh which plugin executes in different stages ie pre-validation(no scope for roll back), pre-operations and post operations of an event eg: before/after create/delete event)
* Plugin Context (stores all the input parameters, ie if a plugin is run for account entity, then all the fields on the accounts are made available through this context)
* Impersonation (run on some other user credentials)
* Plugin registration tool
* Privilege for Register
* Plug in isolations
* Messages and Images 
* 2mins TimeOUT (better to create plugins which runs within 2mins, else it'll throw timeout errors.)
* Sync/Async
* Registration options

steps to create:
1. VS -> class library -> add library "MS.Crmsdk.coreassemblies" + "xrm.sdk.pluginregistrationtool" -> add namespace "MS.xrm.sdk" -> add interface "Iplugin" to the class.
2. add interface and necessary execute code from intellisense.
3. write your necessary code.

Register the plugin:
1. Run the pluginregistration tool
2. connect to CRM using login credentials
3. Create new assembly --> select the created dll.
4. create new step under the created assembly.

Update the plugin:
1. Run the pluginregistration tool
2. connect to CRM using login credentials
3. Update new assembly --> select the created dll.
4. Update new step under the created assembly.

Debugging:
1. Install the profiler
2. Create the event you need to debug.
3. select the step, start the profiler.
4. go to VS, start debug and attach the "pluginregistrationtool" to the debugger.
5. go to pluginregistrationtool again run the debug.
6. Create the event you need to debug
7. select the event, assembly, plugin etc
7. Start Execution
 
********************
form script/javascript:

executionContext --> gives all the context of CRM
executionContext.getFormContext() -> provided by MS, give the form context for the form where the js is executing.
executionContext.getFormContext().getAttribute("logicalname") --> gettting the field details.
executionContext.getFormContext().getAttribute("logicalname").getValue() --> gettting the field value.

uploading the script to a form:
1. upload in the web reource
2. Add to form library
3. Event Handler -> on which control you wanted to execute the file/script
4. Add a event, select the uploaded script and enter the function name you wanted to execute.

*********************************

Workflows:

* Can be Asynchronous or Real time 
* Can be initiated by User or can be called from Javascript 
* Can be called On-Demand 
* Can be extended by Custom Workflow Activities 
* Can call Child Workflows 
* Can Execute Messages like Create, Update, Delete, Assign, Retrieve etc 
* No developers required to configure workflow 
* Exceptions are captured in system job 
* Defines Triggers 
* Supports workflow running scope 

********************************************

Actions:

* Cannot be run On-demand by user 
* Only can triggered by Code or Processes 
* Supports Input and Output Arguments 
* Can be configured to run for all entity by selecting None(global) 
* Can be used as a message or event 
* No Scope configuration 
* No automatic run option 

*************************************************

Custom Workflow Activity/Action in CRM (https://www.youtube.com/watch?v=Ps1u6Ti2wQ8):

This is not creation of a custom workflow but creating an custom activity/action in the workflow.

VS -> class -> add key --> add references (xrm libs) --> add new class -> add namespaces -> add interfaces -> write code

build/rebuild the code.

open xrmregistrationplugintool -> add dll as an assembly.

create a regular workflow -> add the custom activity/action -> (all other steps are similar to regular workflow.)

************************************************

Security:

types:
1. Role based
2. Roe based
3. field based
4. hierarchy based - Manager and Position hierarchy


fundamentals:

Organization
Business unit
Users
Security roles
Previleges
Access level/depth
Important Notes
